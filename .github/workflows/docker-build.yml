name: Build Docker Compose Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Debug file structure
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Root directory contents ==="
        ls -la
        echo "=== Frontend Dockerfile ==="
        ls -la Dockerfile
        echo "=== Backend directory ==="
        ls -la MenuGeneratorBarbare/
        echo "=== Backend Dockerfile ==="
        ls -la MenuGeneratorBarbare/Dockerfile
        echo "=== Checking Docker buildx ==="
        docker buildx version

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: MenuGeneratorBarbare
        file: MenuGeneratorBarbare/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Fallback - Build images with regular Docker (if buildx fails)
      if: failure()
      run: |
        echo "Buildx failed, trying regular Docker build..."
        
        # Build frontend
        docker build -t temp-frontend .
        
        # Build backend  
        docker build -t temp-backend MenuGeneratorBarbare/
        
        echo "Regular Docker build completed successfully"

    - name: Test with Docker Compose
      run: |
        # Debug: Show current directory and files
        pwd
        ls -la
        echo "Checking for Dockerfiles..."
        ls -la Dockerfile
        ls -la MenuGeneratorBarbare/Dockerfile
        
        # Build with explicit context
        docker compose -f docker-compose.yml build --no-cache
        docker compose -f docker-compose.yml up -d
        sleep 30
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        
        # Test backend
        curl -f http://localhost:5000/getMealList || exit 1
        
        docker compose -f docker-compose.yml down

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        format: 'sarif'
        output: 'trivy-backend-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'